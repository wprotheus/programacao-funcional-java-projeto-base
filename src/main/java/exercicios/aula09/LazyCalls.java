package exercicios.aula09;

import java.util.Collection;
import java.util.List;

/**
 * Exemplo mostrando que, dependendo das opera√ß√µes que voc√™ fizer em uma cadeia de {@link java.util.stream.Stream},
 * tais opera√ß√µes ser√£o ignoradas (n√£o ser√£o executadas) se n√£o forem necess√°rias.
 * Este exemplo mostra que as opera√ß√µes map ser√£o totalmente ignoradas e que a lista de n√∫meros
 * n√£o ser√° percorrida nenhuma vez (pois o {@link Interceptor} n√£o imprimir√° nenhuma mensagem
 * indicando o total de itera√ß√µes sobre a lista).
 * Isto porque, para obter o total de n√∫meros na lista em um stream que n√£o tem nenhum filter,
 * n√£o precisa realizar maps nem percorrer a lista. A pr√≥pria interface {@link Collection} j√° tem um m√©todo
 * {@link Collection#size()} que pode ser chamado diretamente pelo stream.
 * As implementa√ß√µes de {@link Collection} j√° guardam uma vari√°vel com o total de elementos,
 * dispensando qualquer itera√ß√£o para descobrir este total.
 * Se se n√£o h√° um filter (voc√™ for apenas contar o total de elementos),
 * voc√™ n√£o precisa de um map pra isso. O Stream j√° entende isso e n√£o executa as fun√ß√µes passadas para o map.
 *
 * <p>Obviamente, se voc√™ quer apenas o total de elementos da lista, deveria
 * simplesmente executar {@code int total = numeros.size()}, n√£o precisa de Stream pra isso.
 * O exemplo √© apenas para mostrar que, mesmo que voc√™ escreva um c√≥digo que n√£o faz sentido,
 * que levaria mais tempo pra executar, a Stream se encarregar de melhorar
 * o desempenho desse seu c√≥digo porcaria üòÇ</p>
 *
 * @author Manoel Campos
 */
public class LazyCalls {
    public static void main(String[] args) {
        new LazyCalls();
    }

    public LazyCalls() {
        final var numeros = List.of(-4, -3, -2, -1, 0, 1, 2, 3, 4, 5);
        final var stream = Interceptor.stream(numeros);

        final long totalNumeros =
            stream
                .map(n -> {
                    /* N√£o ser√° impresso pois o map n√£o precisa ser executado
                    quando a opera√ß√£o final √© um count() e n√£o temos outras
                    opera√ß√µes como filter, skip ou limit (por exemplo).
                    */
                    System.out.printf("map1: Math.abs(%d)\n", n);
                    return Math.abs(n);

                })
                .map(n -> {
                    /* N√£o ser√° impresso pois o map n√£o precisa ser executado
                    quando a opera√ß√£o final √© um count() e n√£o temos outras
                    opera√ß√µes como filter, skip ou limit (por exemplo).
                    */
                    System.out.printf("map2: %d * 100\n", n);
                    return n * 100;

                })
                .count();

        System.out.printf("Java -> Tamanho da Lista: %d Total de N√∫meros Obtidos: %d\n", numeros.size(), totalNumeros);
    }
}
